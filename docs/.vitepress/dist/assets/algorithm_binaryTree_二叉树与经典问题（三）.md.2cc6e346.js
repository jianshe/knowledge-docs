import{_ as s,c as a,o as n,a as l}from"./app.16764a97.js";const d=JSON.parse('{"title":"二叉树与经典问题（三）","description":"","frontmatter":{},"headers":[{"level":2,"title":"场景一：二叉树最大宽度","slug":"场景一-二叉树最大宽度","link":"#场景一-二叉树最大宽度","children":[]},{"level":2,"title":"描述：给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与**满二叉树（full binary tree）**结构相同，但一些节点为空","slug":"描述-给定一个二叉树-编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与-满二叉树-full-binary-tree-结构相同-但一些节点为空","link":"#描述-给定一个二叉树-编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与-满二叉树-full-binary-tree-结构相同-但一些节点为空","children":[]},{"level":2,"title":"示例1：","slug":"示例1","link":"#示例1","children":[]},{"level":2,"title":"示例2：","slug":"示例2","link":"#示例2","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路","link":"#算法思路","children":[]},{"level":2,"title":"代码编写如下：","slug":"代码编写如下","link":"#代码编写如下","children":[]},{"level":2,"title":"场景二：监控二叉树","slug":"场景二-监控二叉树","link":"#场景二-监控二叉树","children":[]},{"level":2,"title":"描述：给定一个二叉树，我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视**其父对象、自身及其直接子对象。**计算监控树的所有节点所需的最小摄像头数量。","slug":"描述-给定一个二叉树-我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视-其父对象、自身及其直接子对象。-计算监控树的所有节点所需的最小摄像头数量。","link":"#描述-给定一个二叉树-我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视-其父对象、自身及其直接子对象。-计算监控树的所有节点所需的最小摄像头数量。","children":[]},{"level":2,"title":"示例1：","slug":"示例1-1","link":"#示例1-1","children":[]},{"level":2,"title":"示例 2：","slug":"示例-2","link":"#示例-2","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-1","link":"#算法思路-1","children":[]},{"level":2,"title":"代码实现如下：","slug":"代码实现如下","link":"#代码实现如下","children":[]},{"level":2,"title":"场景三：路径总和","slug":"场景三-路径总和","link":"#场景三-路径总和","children":[]},{"level":2,"title":"描述：给你二叉树的根节点 root 和一个表示目标和的整数 targetSum ，判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。","slug":"描述-给你二叉树的根节点-root-和一个表示目标和的整数-targetsum-判断该树中是否存在-根节点到叶子节点-的路径-这条路径上所有节点值相加等于目标和-targetsum-。","link":"#描述-给你二叉树的根节点-root-和一个表示目标和的整数-targetsum-判断该树中是否存在-根节点到叶子节点-的路径-这条路径上所有节点值相加等于目标和-targetsum-。","children":[]},{"level":2,"title":"示例 1：","slug":"示例-1","link":"#示例-1","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-2","link":"#算法思路-2","children":[]},{"level":2,"title":"代码实现如下：","slug":"代码实现如下-1","link":"#代码实现如下-1","children":[]}],"relativePath":"algorithm/binaryTree/二叉树与经典问题（三）.md"}'),p={name:"algorithm/binaryTree/二叉树与经典问题（三）.md"},o=l(`<h1 id="二叉树与经典问题-三" tabindex="-1">二叉树与经典问题（三） <a class="header-anchor" href="#二叉树与经典问题-三" aria-hidden="true">#</a></h1><h2 id="场景一-二叉树最大宽度" tabindex="-1">场景一：二叉树最大宽度 <a class="header-anchor" href="#场景一-二叉树最大宽度" aria-hidden="true">#</a></h2><h2 id="描述-给定一个二叉树-编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与-满二叉树-full-binary-tree-结构相同-但一些节点为空" tabindex="-1">描述：给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与**满二叉树（full binary tree）**结构相同，但一些节点为空 <a class="header-anchor" href="#描述-给定一个二叉树-编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与-满二叉树-full-binary-tree-结构相同-但一些节点为空" aria-hidden="true">#</a></h2><h2 id="示例1" tabindex="-1">示例1： <a class="header-anchor" href="#示例1" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">输入</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">           </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#BABED8;">         </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">   \\</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">     </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> \\     \\  </span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">   </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">     </span><span style="color:#F78C6C;">9</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">输出</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#FFCB6B;">解释</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> 最大值出现在树的第 </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;"> 层，宽度为 </span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;"> (</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,null,</span><span style="color:#F78C6C;">9</span><span style="color:#BABED8;">)。</span></span>
<span class="line"></span></code></pre></div><h2 id="示例2" tabindex="-1">示例2： <a class="header-anchor" href="#示例2" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">输入</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#BABED8;">         </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;"> \\       </span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">   </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">     </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">输出</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#FFCB6B;">解释</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> 最大值出现在树的第 </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;"> 层，宽度为 </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> (</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">)。</span></span>
<span class="line"></span></code></pre></div><h2 id="算法思路" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路" aria-hidden="true">#</a></h2><ul><li>给整个树做一个编号，从左到右，从上到下开始。</li><li>root的编号为1，那么root的左孩子编号就为2，右孩子就为3.</li><li>root.left的index = root的index * 2，root.right的index = root的index*2 + 1</li><li>然后我们定义一个变量max来记录宽度的最大值。每层的序号相减完毕后和max进行比较，取最大值。</li><li>width为Rindex - Lindex + 1；</li></ul><h2 id="代码编写如下" tabindex="-1">代码编写如下： <a class="header-anchor" href="#代码编写如下" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">TreeNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">root</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">number</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  超过 2 的 1024 次方的数值，无法表示</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">Math.pow(2, 1024) // Infinity</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> widthOfBinaryTree </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 定义一个二维数组存储当前层的序号和存入的节点。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">max</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">que</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [[</span><span style="color:#F78C6C;">0</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">root</span><span style="color:#F07178;">]]</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 遍历这个数组</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">que</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">que</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">que</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">][</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">que</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">][</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">max</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">max</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">width</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">que</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">([</span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">([</span><span style="color:#BABED8;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#C792EA;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">que</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">max</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><a href="https://github.com/tc39/proposal-bigint" target="_blank" rel="noreferrer">ES2020</a> 引入了一种新的数据类型 BigInt（大整数），来解决这个问题。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2172141653</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">15346349309</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// BigInt 可以保持精度</span></span>
<span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> b </span><span style="color:#676E95;font-style:italic;">// 33334444555566667777n</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 普通整数无法保持精度</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(a) </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#BABED8;">(b) </span><span style="color:#676E95;font-style:italic;">// 33334444555566670000</span></span>
<span class="line"></span></code></pre></div><p>为了与 Number 类型区别，BigInt 类型的数据必须添加后缀<code>n</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">1234</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 普通整数</span></span>
<span class="line"><span style="color:#F78C6C;">1234</span><span style="color:#C792EA;">n</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// BigInt</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// BigInt 的运算</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#C792EA;">n</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 3n</span></span>
<span class="line"></span></code></pre></div><h2 id="场景二-监控二叉树" tabindex="-1">场景二：监控二叉树 <a class="header-anchor" href="#场景二-监控二叉树" aria-hidden="true">#</a></h2><h2 id="描述-给定一个二叉树-我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视-其父对象、自身及其直接子对象。-计算监控树的所有节点所需的最小摄像头数量。" tabindex="-1">描述：给定一个二叉树，我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视**其父对象、自身及其直接子对象。**计算监控树的所有节点所需的最小摄像头数量。 <a class="header-anchor" href="#描述-给定一个二叉树-我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视-其父对象、自身及其直接子对象。-计算监控树的所有节点所需的最小摄像头数量。" aria-hidden="true">#</a></h2><h2 id="示例1-1" tabindex="-1">示例1： <a class="header-anchor" href="#示例1-1" aria-hidden="true">#</a></h2><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png" alt="img"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#babed8;">输入：[0,0,null,0,0]</span></span>
<span class="line"><span style="color:#babed8;">输出：1</span></span>
<span class="line"><span style="color:#babed8;">解释：如图所示，一台摄像头足以监控所有节点。</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h2 id="示例-2" tabindex="-1"><strong>示例 2：</strong> <a class="header-anchor" href="#示例-2" aria-hidden="true">#</a></h2><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png" alt="img"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#babed8;">输入：[0,0,null,0,null,0,null,null,0]</span></span>
<span class="line"><span style="color:#babed8;">输出：2</span></span>
<span class="line"><span style="color:#babed8;">解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h2 id="算法思路-1" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路-1" aria-hidden="true">#</a></h2><ul><li><p>如果在root放置摄像头，那么root的⼦节点都会被监控到，所以只要保证⼦节点 下⾯的⼦树被监控即可。</p></li><li><p>如果不在root放置摄像头，就要保证root两个⼦树被监控到的同时必须在root的 ⼀个⼦节点上安装摄像头，从⽽保证root被监控到。</p></li><li><p>我们就可以分析出三种状态：</p><ul><li>root在必须放置摄像头的情况下，覆盖整个树所需要的摄像头的数⽬</li><li>不考虑root是否放置摄像头，覆盖整个树所需要的摄像头的数⽬</li><li>不考虑root是否被监控到，覆盖两个⼦树所需的摄像头的数⽬</li></ul><p>这三种状态下a ≥ b ≥ c我们假设当前节点的⼦节点分别对应的状态变量为la,lb,lc和 ra,rb,rc</p><p>​ a状态：左右⼦树均被监控且根节点有摄像头，所以 a = lc+rc+1</p><p>​ b状态：整棵树均被监控，根节点不考虑是否有摄像头，所以 b = min(a,min(la+rb,lb+ra));</p><p>​ c状态：要保证两棵⼦树被完全监控，要么在root放⼀个摄像头，要么root处不放 置摄像头,此时两棵⼦树分别保证⾃⼰被监控，需要的摄像头数⽬为lb+rb。</p></li></ul><p>如果root的⼦节点为空，我们就不能在这个⼦节点放置摄像头来监控root。我们就设定⼀ 个极⼤的整数，⽤于标识这种情况。 最后我们只需要求出状态b的结果就可以了。</p><h2 id="代码实现如下" tabindex="-1">代码实现如下： <a class="header-anchor" href="#代码实现如下" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dfs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">Number</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">MAX_SAFE_INTEGER </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">la</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lb</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">ra</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">rb</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">rc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">rc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">la</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">rb</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ra</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">lb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">rb</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">c</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">dfs</span><span style="color:#BABED8;">(root)[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="场景三-路径总和" tabindex="-1">场景三：路径总和 <a class="header-anchor" href="#场景三-路径总和" aria-hidden="true">#</a></h2><h2 id="描述-给你二叉树的根节点-root-和一个表示目标和的整数-targetsum-判断该树中是否存在-根节点到叶子节点-的路径-这条路径上所有节点值相加等于目标和-targetsum-。" tabindex="-1">描述：给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> ，判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。 <a class="header-anchor" href="#描述-给你二叉树的根节点-root-和一个表示目标和的整数-targetsum-判断该树中是否存在-根节点到叶子节点-的路径-这条路径上所有节点值相加等于目标和-targetsum-。" aria-hidden="true">#</a></h2><h2 id="示例-1" tabindex="-1"><strong>示例 1：</strong> <a class="header-anchor" href="#示例-1" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#babed8;">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span></span>
<span class="line"><span style="color:#babed8;">输出：true</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p><strong>示例 2：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#babed8;">输入：root = [1,2,3], targetSum = 5</span></span>
<span class="line"><span style="color:#babed8;">输出：false</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><p><strong>示例 3：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#babed8;">输入：root = [1,2], targetSum = 0</span></span>
<span class="line"><span style="color:#babed8;">输出：false</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre></div><h2 id="算法思路-2" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路-2" aria-hidden="true">#</a></h2><p>​ 从根节点开始，每经过⼀个节点就让targetSum的值减去当前节点的值，然后再将 targetSum传递给当前节点的左右⼦节，如果到某个叶⼦节点targetSum的值为0，那么 就存在符合题意的路径。</p><h2 id="代码实现如下-1" tabindex="-1">代码实现如下： <a class="header-anchor" href="#代码实现如下-1" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">TreeNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">root</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">number</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">targetSum</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> hasPathSum </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">root</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">targetSum</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 我们最终的目的，就是找一个从根节点的数值累加到某一个叶子节点的数值的和等于targetSum</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 因此我们可以将targetSum减去当前节点的值，然后传递给当前节点的子节点。</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果当前节点没有子节点，就要判断targetSum是否为0，如果为零，就证明我们至少有一条路径。</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 没有一个到达叶子节点为零的情况，证明没有符合条件的路径</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">targetSum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">targetSum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasPathSum</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">targetSum</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">hasPathSum</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">root</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">targetSum</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div>`,40),t=[o];function e(c,r,y,i,F,D){return n(),a("div",null,t)}const E=s(p,[["render",e]]);export{d as __pageData,E as default};
