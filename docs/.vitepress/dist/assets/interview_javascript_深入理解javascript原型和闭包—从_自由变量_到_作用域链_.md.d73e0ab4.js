import{_ as s,c as a,o as n,a as p}from"./app.16764a97.js";const l="/assets/251448515607115.3a6c59d2.png",B=JSON.parse('{"title":"深入理解javascript原型和闭包—从[自由变量]到[作用域链]","description":"","frontmatter":{},"headers":[],"relativePath":"interview/javascript/深入理解javascript原型和闭包—从[自由变量]到[作用域链].md"}'),o={name:"interview/javascript/深入理解javascript原型和闭包—从[自由变量]到[作用域链].md"},t=p(`<h1 id="深入理解javascript原型和闭包—从-自由变量-到-作用域链" tabindex="-1">深入理解javascript原型和闭包—从[自由变量]到[作用域链] <a class="header-anchor" href="#深入理解javascript原型和闭包—从-自由变量-到-作用域链" aria-hidden="true">#</a></h1><p>在A作用域中作用的变量x，却没有在A作用域中声明（即在其他作用域中声明的），对于A作用域来说，x就是一个自由变量。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 这里的x在这里就是一个自由变量</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如上程序中，在调用fn()函数时，函数体中第4行。取b的值直接可以在fn作用域中取，因为b就是在这里定义的。而取x的值时，就需要到另一个作用域中取。到哪个作用域中取呢？</p><p><strong>有人说过要到父作用域中取，其实有时候这种解释会产生歧义</strong>。例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">x</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">f</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    (</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">f</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 10，而不是20</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">show</span><span style="color:#BABED8;">(fn)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>所以，不要在用以上说法了。相比而言，用这句话描述会更贴切--<strong>要到创建这个函数的那个作用域中取值--是&quot;创建&quot;，而不是&quot;调用&quot;，切记切记</strong>--其实这就是所谓的&quot;静态作用域&quot;。</p><p>对于本文第一段代码，在fn函数中，取自由变量x的值时，要到哪个作用域中取？--要到创建fn函数的那个作用域中取--无论fn函数将在哪里调用。</p><p>上面描述的只是跨一步作用域去寻找。</p><p>如果跨了一步，还没找到呢？--接着跨！---直到跨到全局作用域为止。要是在全局作用域中都没有找到，那就是真的没有了。</p><p>这个一步一步&quot;跨&quot;的路线，我们称为--<strong>作用域链</strong></p><p>我们拿文字总结一下取自由变量时的这个&quot;作用域链&quot;过程。（假设a是自由量）</p><ul><li>第一步，先在当前作用域中查找a，如果有则获取并结束。如果没有则继续;</li><li>第二步，如果当前作用域是全局作用域，则证明a未定义，结束；否则继续；</li><li>第三步，（不是全局作用域，那就是函数作用域）将创建该函数的作用域作为当前作用域；</li><li>第四步，跳转到第一步。</li></ul><p><img src="`+l+'" alt="16f879b5b51541a1"></p><p>以上代码中：执行var x = fn()，fn()返回的是bar函数，赋值给x。执行x()，即执行bar函数代码。取b的值时，直接在fn作用域取出。但是取不到，只能转向创建fn的那个作用域中去查找，结果找到了。</p><p>这一节看似很轻松的把作用域引出来，并讲完了。之所以轻松是有前几节的基础，否则将很难解释。</p>',16),e=[t];function c(r,y,F,i,D,_){return n(),a("div",null,e)}const E=s(o,[["render",c]]);export{B as __pageData,E as default};
