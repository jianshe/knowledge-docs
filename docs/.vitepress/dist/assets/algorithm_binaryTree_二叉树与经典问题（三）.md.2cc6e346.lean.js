import{_ as s,c as a,o as n,a as l}from"./app.16764a97.js";const d=JSON.parse('{"title":"二叉树与经典问题（三）","description":"","frontmatter":{},"headers":[{"level":2,"title":"场景一：二叉树最大宽度","slug":"场景一-二叉树最大宽度","link":"#场景一-二叉树最大宽度","children":[]},{"level":2,"title":"描述：给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与**满二叉树（full binary tree）**结构相同，但一些节点为空","slug":"描述-给定一个二叉树-编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与-满二叉树-full-binary-tree-结构相同-但一些节点为空","link":"#描述-给定一个二叉树-编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与-满二叉树-full-binary-tree-结构相同-但一些节点为空","children":[]},{"level":2,"title":"示例1：","slug":"示例1","link":"#示例1","children":[]},{"level":2,"title":"示例2：","slug":"示例2","link":"#示例2","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路","link":"#算法思路","children":[]},{"level":2,"title":"代码编写如下：","slug":"代码编写如下","link":"#代码编写如下","children":[]},{"level":2,"title":"场景二：监控二叉树","slug":"场景二-监控二叉树","link":"#场景二-监控二叉树","children":[]},{"level":2,"title":"描述：给定一个二叉树，我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视**其父对象、自身及其直接子对象。**计算监控树的所有节点所需的最小摄像头数量。","slug":"描述-给定一个二叉树-我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视-其父对象、自身及其直接子对象。-计算监控树的所有节点所需的最小摄像头数量。","link":"#描述-给定一个二叉树-我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视-其父对象、自身及其直接子对象。-计算监控树的所有节点所需的最小摄像头数量。","children":[]},{"level":2,"title":"示例1：","slug":"示例1-1","link":"#示例1-1","children":[]},{"level":2,"title":"示例 2：","slug":"示例-2","link":"#示例-2","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-1","link":"#算法思路-1","children":[]},{"level":2,"title":"代码实现如下：","slug":"代码实现如下","link":"#代码实现如下","children":[]},{"level":2,"title":"场景三：路径总和","slug":"场景三-路径总和","link":"#场景三-路径总和","children":[]},{"level":2,"title":"描述：给你二叉树的根节点 root 和一个表示目标和的整数 targetSum ，判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。","slug":"描述-给你二叉树的根节点-root-和一个表示目标和的整数-targetsum-判断该树中是否存在-根节点到叶子节点-的路径-这条路径上所有节点值相加等于目标和-targetsum-。","link":"#描述-给你二叉树的根节点-root-和一个表示目标和的整数-targetsum-判断该树中是否存在-根节点到叶子节点-的路径-这条路径上所有节点值相加等于目标和-targetsum-。","children":[]},{"level":2,"title":"示例 1：","slug":"示例-1","link":"#示例-1","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-2","link":"#算法思路-2","children":[]},{"level":2,"title":"代码实现如下：","slug":"代码实现如下-1","link":"#代码实现如下-1","children":[]}],"relativePath":"algorithm/binaryTree/二叉树与经典问题（三）.md"}'),p={name:"algorithm/binaryTree/二叉树与经典问题（三）.md"},o=l("",40),t=[o];function e(c,r,y,i,F,D){return n(),a("div",null,t)}const E=s(p,[["render",e]]);export{d as __pageData,E as default};
