import{_ as s,c as n,o as a,a as l}from"./app.16764a97.js";const E=JSON.parse('{"title":"二叉树与经典问题（一）","description":"","frontmatter":{},"headers":[{"level":2,"title":"场景一：二叉树的前序遍历","slug":"场景一-二叉树的前序遍历","link":"#场景一-二叉树的前序遍历","children":[]},{"level":2,"title":"描述：给你二叉树的根节点 root ，返回它节点值的前序遍历。","slug":"描述-给你二叉树的根节点-root-返回它节点值的前序遍历。","link":"#描述-给你二叉树的根节点-root-返回它节点值的前序遍历。","children":[]},{"level":2,"title":"示例：","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"算法思路:","slug":"算法思路","link":"#算法思路","children":[]},{"level":2,"title":"思路一：使用递归实现","slug":"思路一-使用递归实现","link":"#思路一-使用递归实现","children":[]},{"level":2,"title":"思路二：使用迭代实现","slug":"思路二-使用迭代实现","link":"#思路二-使用迭代实现","children":[]},{"level":2,"title":"代码实现如下：递归实现","slug":"代码实现如下-递归实现","link":"#代码实现如下-递归实现","children":[]},{"level":2,"title":"代码实现如下：迭代实现","slug":"代码实现如下-迭代实现","link":"#代码实现如下-迭代实现","children":[]},{"level":2,"title":"场景二：二叉树的中序遍历","slug":"场景二-二叉树的中序遍历","link":"#场景二-二叉树的中序遍历","children":[]},{"level":2,"title":"描述：给你二叉树的根节点 root ，返回它节点值的中序遍历。","slug":"描述-给你二叉树的根节点-root-返回它节点值的中序遍历。","link":"#描述-给你二叉树的根节点-root-返回它节点值的中序遍历。","children":[]},{"level":2,"title":"示例1：","slug":"示例1","link":"#示例1","children":[]},{"level":2,"title":"算法思路:","slug":"算法思路-1","link":"#算法思路-1","children":[]},{"level":2,"title":"思路一：使用递归实现","slug":"思路一-使用递归实现-1","link":"#思路一-使用递归实现-1","children":[]},{"level":2,"title":"思路二：使用迭代实现","slug":"思路二-使用迭代实现-1","link":"#思路二-使用迭代实现-1","children":[]},{"level":2,"title":"代码实现如下：递归实现","slug":"代码实现如下-递归实现-1","link":"#代码实现如下-递归实现-1","children":[]},{"level":2,"title":"代码实现如下：迭代实现","slug":"代码实现如下-迭代实现-1","link":"#代码实现如下-迭代实现-1","children":[]},{"level":2,"title":"场景三：二叉树的后序遍历","slug":"场景三-二叉树的后序遍历","link":"#场景三-二叉树的后序遍历","children":[]},{"level":2,"title":"描述：给定一个二叉树，返回它的 后序 遍历。","slug":"描述-给定一个二叉树-返回它的-后序-遍历。","link":"#描述-给定一个二叉树-返回它的-后序-遍历。","children":[]},{"level":2,"title":"示例：","slug":"示例-1","link":"#示例-1","children":[]},{"level":2,"title":"算法思路:","slug":"算法思路-2","link":"#算法思路-2","children":[]},{"level":2,"title":"思路一：使用递归实现","slug":"思路一-使用递归实现-2","link":"#思路一-使用递归实现-2","children":[]},{"level":2,"title":"思路二：使用迭代实现","slug":"思路二-使用迭代实现-2","link":"#思路二-使用迭代实现-2","children":[]},{"level":2,"title":"代码实现如下：递归实现","slug":"代码实现如下-递归实现-2","link":"#代码实现如下-递归实现-2","children":[]},{"level":2,"title":"代码实现如下：迭代实现","slug":"代码实现如下-迭代实现-2","link":"#代码实现如下-迭代实现-2","children":[]},{"level":2,"title":"场景四：从前序与中序遍历序列构造⼆叉树","slug":"场景四-从前序与中序遍历序列构造二叉树","link":"#场景四-从前序与中序遍历序列构造二叉树","children":[]},{"level":2,"title":"描述：根据一棵树的前序遍历与中序遍历构造二叉树。","slug":"描述-根据一棵树的前序遍历与中序遍历构造二叉树。","link":"#描述-根据一棵树的前序遍历与中序遍历构造二叉树。","children":[]},{"level":2,"title":"示例：","slug":"示例-2","link":"#示例-2","children":[]},{"level":2,"title":"算法思路如下：","slug":"算法思路如下","link":"#算法思路如下","children":[]}],"relativePath":"algorithm/binaryTree/二叉树与经典问题（一）.md"}'),p={name:"algorithm/binaryTree/二叉树与经典问题（一）.md"},o=l("",49),t=[o];function e(c,r,y,i,F,D){return a(),n("div",null,t)}const f=s(p,[["render",e]]);export{E as __pageData,f as default};
