import{_ as e,c as a,o as i,a as r}from"./app.16764a97.js";const l="/assets/9213b07eca806538fa88f4329adda144ad3482b5.ee0a713a.png",n="/assets/binaryTree-type.f4b22d03.png",h="/assets/searchTree.5589bf73.png",b=JSON.parse('{"title":"关于二叉树","description":"","frontmatter":{},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"二叉树-遍历：","slug":"二叉树-遍历","link":"#二叉树-遍历","children":[]},{"level":2,"title":"分类：","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"二叉树--完全二叉树","slug":"二叉树-完全二叉树","link":"#二叉树-完全二叉树","children":[]},{"level":2,"title":"特点：","slug":"特点-1","link":"#特点-1","children":[]},{"level":2,"title":"二叉树--二叉查找树","slug":"二叉树-二叉查找树","link":"#二叉树-二叉查找树","children":[]},{"level":2,"title":"定义：二叉查找树(Binary Search Tree),又称为二叉搜索树。设x为二叉查找树中的一个结点，x节点包含关键字key，节点x的key值记为key[x]。如果y是x的左子树中的一个结点，则key[y] <= key[x];如果y是x的右子树的一个结点。则key[y]>=key[x]。","slug":"定义-二叉查找树-binary-search-tree-又称为二叉搜索树。设x为二叉查找树中的一个结点-x节点包含关键字key-节点x的key值记为key-x-。如果y是x的左子树中的一个结点-则key-y-key-x-如果y是x的右子树的一个结点。则key-y-key-x-。","link":"#定义-二叉查找树-binary-search-tree-又称为二叉搜索树。设x为二叉查找树中的一个结点-x节点包含关键字key-节点x的key值记为key-x-。如果y是x的左子树中的一个结点-则key-y-key-x-如果y是x的右子树的一个结点。则key-y-key-x-。","children":[]}],"relativePath":"algorithm/binaryTree/关于二叉树.md"}'),t={name:"algorithm/binaryTree/关于二叉树.md"},d=r('<h1 id="关于二叉树" tabindex="-1">关于二叉树 <a class="header-anchor" href="#关于二叉树" aria-hidden="true">#</a></h1><blockquote><p>我们所使用的数据结构由结点组成，结点包含的链接可以为空(null)或者指向其他结点。在二叉树中，每个结点只能有一个父结点（只有一个例外，也就是根结点，它没有父结点），而且每个结点都只有左右两个链接，分别指向自己的左子结点和右子结点。</p></blockquote><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-hidden="true">#</a></h2><p>​ 二叉树（binary tree）是指树中节点的度不大于2的有序树，它是一种最简单最重要的树。二叉树的递归定义为：二叉树是一棵空树，或者是一棵由一个根节点和两棵互不相交的，分别称作根的左子树和右子树组成的非空树；左子树和右子树又同样都是二叉树。如下图所示：</p><p><img src="'+l+'" alt=""></p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h2><ol><li><p>每个节点度最多为2.</p></li><li><p>度为0的节点比度为2的节点多1个。</p><p><strong>证明如下：</strong></p><ul><li><p>拥有n个节点的树有n-1条边。</p></li><li><p>假设度为0的节点数为n0个，度为1的节点数为n1个，度为2的节点数为n2个。</p></li><li><p>由于点的数量等于边的数量加1，因此：n0+n1+n2 = n(度为1的节点数边为1，度为2的节点数边为2)，则</p><p>得到下面等式：n0+n1+n2 = n1 + 2n2 + 1;所以n0 = n2 + 1,因此度为0的节点比度为2 的节点多1个。</p></li></ul></li></ol><h2 id="二叉树-遍历" tabindex="-1">二叉树-遍历： <a class="header-anchor" href="#二叉树-遍历" aria-hidden="true">#</a></h2><p>​ <strong>根据根节点所在的位置来区分：</strong></p><ol><li><p>前序遍历。根 左 右</p><p>1→2→4→5→3→6</p></li><li><p>中序遍历。 左 根 右</p><p>4→2→5→1→3→6</p></li><li><p>后序遍历。 左 右 根</p><p>4→5→2→6→3→1</p></li></ol><h2 id="分类" tabindex="-1">分类： <a class="header-anchor" href="#分类" aria-hidden="true">#</a></h2><ol><li><h2 id="完全二叉树" tabindex="-1">完全二叉树 <a class="header-anchor" href="#完全二叉树" aria-hidden="true">#</a></h2><h2 id="只有在最后一层的右边缺少节点的二叉树" tabindex="-1">只有在最后一层的右边缺少节点的二叉树 <a class="header-anchor" href="#只有在最后一层的右边缺少节点的二叉树" aria-hidden="true">#</a></h2></li><li><h2 id="满二叉树" tabindex="-1">满二叉树 <a class="header-anchor" href="#满二叉树" aria-hidden="true">#</a></h2><h2 id="没有度为1的节点-只有度为0和度为2的节点的二叉树就叫做满二叉树" tabindex="-1">没有度为1的节点，只有度为0和度为2的节点的二叉树就叫做满二叉树 <a class="header-anchor" href="#没有度为1的节点-只有度为0和度为2的节点的二叉树就叫做满二叉树" aria-hidden="true">#</a></h2></li><li><h2 id="完美二叉树" tabindex="-1">完美二叉树 <a class="header-anchor" href="#完美二叉树" aria-hidden="true">#</a></h2><h2 id="每一层节点都满的二叉树" tabindex="-1">每一层节点都满的二叉树 <a class="header-anchor" href="#每一层节点都满的二叉树" aria-hidden="true">#</a></h2></li></ol><p>​ 如下图所示：</p><p><img src="'+n+'" alt=""></p><h2 id="二叉树-完全二叉树" tabindex="-1">二叉树--完全二叉树 <a class="header-anchor" href="#二叉树-完全二叉树" aria-hidden="true">#</a></h2><h2 id="特点-1" tabindex="-1">特点： <a class="header-anchor" href="#特点-1" aria-hidden="true">#</a></h2><ul><li><p>编号为i的子节点：</p><p>​ 左孩子编号： 2 * i</p><p>​ 右孩子编号: 2 * i + 1</p></li><li><p>可以用连续空间存储（数组）</p></li></ul><h2 id="二叉树-二叉查找树" tabindex="-1">二叉树--二叉查找树 <a class="header-anchor" href="#二叉树-二叉查找树" aria-hidden="true">#</a></h2><h2 id="定义-二叉查找树-binary-search-tree-又称为二叉搜索树。设x为二叉查找树中的一个结点-x节点包含关键字key-节点x的key值记为key-x-。如果y是x的左子树中的一个结点-则key-y-key-x-如果y是x的右子树的一个结点。则key-y-key-x-。" tabindex="-1">定义：二叉查找树(Binary Search Tree),又称为二叉搜索树。设x为二叉查找树中的一个结点，x节点包含关键字key，节点x的key值记为key[x]。如果y是x的左子树中的一个结点，则key[y] &lt;= key[x];如果y是x的右子树的一个结点。则key[y]&gt;=key[x]。 <a class="header-anchor" href="#定义-二叉查找树-binary-search-tree-又称为二叉搜索树。设x为二叉查找树中的一个结点-x节点包含关键字key-节点x的key值记为key-x-。如果y是x的左子树中的一个结点-则key-y-key-x-如果y是x的右子树的一个结点。则key-y-key-x-。" aria-hidden="true">#</a></h2><p><img src="'+h+'" alt=""></p><p>在二叉查找树中：</p><ol><li>若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li>没有键值相等的节点。</li></ol>',22),s=[d];function y(c,p,x,o,k,_){return i(),a("div",null,s)}const f=e(t,[["render",y]]);export{b as __pageData,f as default};
