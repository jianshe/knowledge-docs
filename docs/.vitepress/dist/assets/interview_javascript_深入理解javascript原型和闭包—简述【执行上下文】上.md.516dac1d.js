import{_ as s,c as a,o as n,a as p}from"./app.16764a97.js";const l="/assets/18201533471167122212312312.ff9328e9.png",A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"深入理解javascript原型和闭包—简述【执行上下文】上","slug":"深入理解javascript原型和闭包—简述【执行上下文】上","link":"#深入理解javascript原型和闭包—简述【执行上下文】上","children":[]}],"relativePath":"interview/javascript/深入理解javascript原型和闭包—简述【执行上下文】上.md"}'),o={name:"interview/javascript/深入理解javascript原型和闭包—简述【执行上下文】上.md"},t=p(`<h2 id="深入理解javascript原型和闭包—简述【执行上下文】上" tabindex="-1">深入理解javascript原型和闭包—简述【执行上下文】上 <a class="header-anchor" href="#深入理解javascript原型和闭包—简述【执行上下文】上" aria-hidden="true">#</a></h2><p>什么是&quot;执行上下文&quot;（也叫做&quot;执行上下文环境&quot;）？暂且不下定义，先看一段代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// Uncaught ReferenceError: a is not defined.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>第一句报错，a未定义，很正常。第二句、第三句输出都是undefined，说明浏览器在执行console.log(a)时，已经知道了a是undefined，但却不知道a是10（第三句中）。</p><p>在一段js代码拿过来真正一句一句运行之前，浏览器已经做了一些&quot;准备工作&quot;，其中就包括对变量的声明，而不是赋值。变量赋值是在赋值语句执行的时候进行的。可用下图模拟：</p><p><img src="`+l+`" alt="16f879b5b51541a1"></p><p>这是第一种情况。</p><p>下面还有。先来个简单的。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// Window {parent: Window, opener: null, top: Window, length: 3, frames: Window, …}</span></span>
<span class="line"></span></code></pre></div><p>有js开发经验的朋友应该都知道，你无论在哪个位置获取this，都是有值的。至于this的取值情况，比较复杂，会专门拿出一篇文章来讲解。</p><p>与第一种情况不同的是：第一种情况只是对变量进行声明（并没有赋值），而此种情况直接给this赋值。这也是”准备工作“情况要做的事情之一。</p><p>下面还有...第三种情况。</p><p>在第三种情况中，需要注意代码注释中的两个名词--”函数表达式“和&quot;函数声明&quot;。虽然两者都很常用，但是这两者在&quot;准备工作时&quot;，却是两种待遇。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(f1)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// function f1() {}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">f1</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 函数声明</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(f2)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> f2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 函数表达式</span></span>
<span class="line"></span></code></pre></div><p>看以上代码。”函数声明“时我们看到了第二种情况的影子，而”函数表达式“时我们看到 第一种情况的影子。</p><p>没错。在&quot;准备工作&quot;中，对待函数表达式就像对待&quot;var a = 10&quot;这样的变量，只是声明。而对待函数声明时，却把函数整个赋值了。</p><p>好了，&quot;准备工作&quot;介绍完毕。</p><p>我们总结一下，在&quot;准备工作&quot;中完成了哪些工作：</p><ul><li>变量、函数表达式--变量声明，默认赋值为undefined;</li><li>this--赋值</li><li>函数声明--赋值</li></ul><p>这三种数据的准备情况我们称之为”执行上下文“或者&quot;执行上下文环境&quot;。</p>`,20),e=[t];function c(r,i,y,D,B,F){return n(),a("div",null,e)}const u=s(o,[["render",c]]);export{A as __pageData,u as default};
