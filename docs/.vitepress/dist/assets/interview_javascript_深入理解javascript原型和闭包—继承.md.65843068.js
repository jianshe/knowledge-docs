import{_ as s,c as a,o as p,a as o}from"./app.16764a97.js";const n="/assets/182013450814552.13acd268.png",t="/assets/182014022217881.f1c1d6ad.png",l="/assets/182014277067963.19b76843.png",e="/assets/182015334711671.d9fd9d47.png",h=JSON.parse('{"title":"深入理解javascript原型和闭包—继承","description":"","frontmatter":{},"headers":[{"level":2,"title":"javascript中的继承是通过原型链来体现的","slug":"javascript中的继承是通过原型链来体现的","link":"#javascript中的继承是通过原型链来体现的","children":[]},{"level":2,"title":"原型的灵活性","slug":"原型的灵活性","link":"#原型的灵活性","children":[]}],"relativePath":"interview/javascript/深入理解javascript原型和闭包—继承.md"}'),r={name:"interview/javascript/深入理解javascript原型和闭包—继承.md"},c=o(`<h1 id="深入理解javascript原型和闭包—继承" tabindex="-1">深入理解javascript原型和闭包—继承 <a class="header-anchor" href="#深入理解javascript原型和闭包—继承" aria-hidden="true">#</a></h1><blockquote><p>java中的继承与javascript中的继承是两个完全不同的概念</p></blockquote><h2 id="javascript中的继承是通过原型链来体现的" tabindex="-1">javascript中的继承是通过原型链来体现的 <a class="header-anchor" href="#javascript中的继承是通过原型链来体现的" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> f1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">f1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(f1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(f1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">b)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 200</span></span>
<span class="line"></span></code></pre></div><p>以上代码中，f1是Foo函数new出来的对象，f1.a是f1对象的基本属性，f1.b是怎么来的呢？--从Foo.prototype中得来的，因为f1.__proto__指向的是Foo.prototype。</p><p><strong>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着__proto__这条链向上找，这就是原型链。如下图。</strong></p><p><img src="`+n+'" alt="16f879b5b51541a1"></p><p>上图中，访问f1.b时，f1的基本属性中没有b，于是沿着__proto__找到了Foo.prototype.b。</p><p>那么我们在实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能都知道答案了--hasOwnProperty，特别是在for...in...循环中，一定要注意。</p><p><img src="'+t+'" alt="16f879b5b51541a1"></p><p>等等，不对！f1的hasOwnProperty方法是从哪里来的？f1本身没有，Foo.prototype中也没有，哪儿来的？</p><p>好问题。</p><p>它是从Object.prototype中来的，请看图：</p><p><img src="'+l+'" alt="16f879b5b51541a1"></p><p>对象的原型链是沿着__proto__这条线走的，因此在查找f1.hasOwnProperty属性时，就会顺着原型链一直查找到Object.prototype.</p><p>由于所有的对象的原型链都会找到Object.prototype，因此所有的对象都会有Object.prototype的方法。这就是所谓的&quot;继承&quot;。</p><p>说一个函数的例子吧。</p><p>我们都知道每个函数都有call，apply方法，都有length,arguments，caller等属性。为什么每个函数都有？这肯定是&quot;继承&quot;的。函数由Function函数创建，因此继承的Function.prototype中的方法。不信可以请微软的Visual Studio老师给我们验证一下:</p><p><img src="'+e+'" alt="16f879b5b51541a1"></p><p>看到了吧，有call、length等这些属性。</p><p>那怎么还有hasOwnProperty呢？--那是Function.prototype继承自Object.prototype的方法。有疑问可以看看讲Instanceof时候那个大图，看看Function.prototype.__proto__是否指向Object.prototype。</p><h2 id="原型的灵活性" tabindex="-1">原型的灵活性 <a class="header-anchor" href="#原型的灵活性" aria-hidden="true">#</a></h2><ul><li>对象或者函数，刚开始new出来之后，可能啥属性都没有。但是你可以这会儿加一个，过一会儿再加两个，非常灵活。</li><li>如果继承的方法不适，可以做出修改。</li><li>如果感觉当前缺少你要用的方法，可以自己去创建。</li></ul>',23),i=[c];function y(F,D,_,B,d,A){return p(),a("div",null,i)}const b=s(r,[["render",y]]);export{h as __pageData,b as default};
