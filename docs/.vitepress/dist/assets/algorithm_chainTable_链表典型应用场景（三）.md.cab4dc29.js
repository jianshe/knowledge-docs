import{_ as s,c as n,o as l,a}from"./app.16764a97.js";const p="/assets/chain4.2eb5144b.png",o="/assets/swapPairs.2a132704.png",e="/assets/removeNthFromEnd.249bc3f9.png",t="/assets/removeDuplicates.3a355274.png",f=JSON.parse('{"title":"链表典型应用场景（三）","description":"","frontmatter":{},"headers":[{"level":2,"title":"场景一：旋转链表","slug":"场景一-旋转链表","link":"#场景一-旋转链表","children":[]},{"level":2,"title":"描述：给定一个链表，旋转链表，将链表每个节点向右移动k个位置，其中k是非负数。","slug":"描述-给定一个链表-旋转链表-将链表每个节点向右移动k个位置-其中k是非负数。","link":"#描述-给定一个链表-旋转链表-将链表每个节点向右移动k个位置-其中k是非负数。","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路","link":"#算法思路","children":[]},{"level":2,"title":"思维导图如下：","slug":"思维导图如下","link":"#思维导图如下","children":[]},{"level":2,"title":"场景二：旋转链表二","slug":"场景二-旋转链表二","link":"#场景二-旋转链表二","children":[]},{"level":2,"title":"描述：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。","slug":"描述-给定一个链表-两两交换其中相邻的节点-并返回交换后的链表。","link":"#描述-给定一个链表-两两交换其中相邻的节点-并返回交换后的链表。","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-1","link":"#算法思路-1","children":[]},{"level":2,"title":"思维导图如下：","slug":"思维导图如下-1","link":"#思维导图如下-1","children":[]},{"level":2,"title":"场景三：删除链表的倒数第 N 个结点","slug":"场景三-删除链表的倒数第-n-个结点","link":"#场景三-删除链表的倒数第-n-个结点","children":[]},{"level":2,"title":"描述：给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。","slug":"描述-给你一个链表-删除链表的倒数第-n-个结点-并且返回链表的头结点。","link":"#描述-给你一个链表-删除链表的倒数第-n-个结点-并且返回链表的头结点。","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-2","link":"#算法思路-2","children":[]},{"level":2,"title":"思维导图如下：","slug":"思维导图如下-2","link":"#思维导图如下-2","children":[]},{"level":2,"title":"场景四：删除排序链表中重复的元素","slug":"场景四-删除排序链表中重复的元素","link":"#场景四-删除排序链表中重复的元素","children":[]},{"level":2,"title":"描述：给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。","slug":"描述-给你一个有序数组-nums-请你-原地-删除重复出现的元素-使每个元素-只出现一次-返回删除后数组的新长度。","link":"#描述-给你一个有序数组-nums-请你-原地-删除重复出现的元素-使每个元素-只出现一次-返回删除后数组的新长度。","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-3","link":"#算法思路-3","children":[]},{"level":2,"title":"思维导图：","slug":"思维导图","link":"#思维导图","children":[]},{"level":2,"title":"代码如下：","slug":"代码如下","link":"#代码如下","children":[]},{"level":2,"title":"场景五：删除排序链表中重复的元素||","slug":"场景五-删除排序链表中重复的元素","link":"#场景五-删除排序链表中重复的元素","children":[]},{"level":2,"title":"描述：给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。","slug":"描述-给定一个排序链表-删除所有含有重复数字的节点-只保留原始链表中-没有重复出现-的数字。","link":"#描述-给定一个排序链表-删除所有含有重复数字的节点-只保留原始链表中-没有重复出现-的数字。","children":[]},{"level":2,"title":"示例：","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-4","link":"#算法思路-4","children":[]},{"level":2,"title":"代码编写：","slug":"代码编写","link":"#代码编写","children":[]}],"relativePath":"algorithm/chainTable/链表典型应用场景（三）.md"}'),c={name:"algorithm/chainTable/链表典型应用场景（三）.md"},r=a('<h1 id="链表典型应用场景-三" tabindex="-1">链表典型应用场景（三） <a class="header-anchor" href="#链表典型应用场景-三" aria-hidden="true">#</a></h1><h2 id="场景一-旋转链表" tabindex="-1">场景一：旋转链表 <a class="header-anchor" href="#场景一-旋转链表" aria-hidden="true">#</a></h2><h2 id="描述-给定一个链表-旋转链表-将链表每个节点向右移动k个位置-其中k是非负数。" tabindex="-1">描述：给定一个链表，旋转链表，将链表每个节点向右移动k个位置，其中k是非负数。 <a class="header-anchor" href="#描述-给定一个链表-旋转链表-将链表每个节点向右移动k个位置-其中k是非负数。" aria-hidden="true">#</a></h2><h2 id="算法思路" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路" aria-hidden="true">#</a></h2><ul><li>判断我们的这个节点是不是为空。</li><li>找到我们链表的尾节点，穿成环。</li><li>获取到链表的长度，找到size-k个节点</li><li>将头部节点指向size-k个节点的下一个节点。</li><li>断开size-k个节点的下一个节点。</li></ul><h2 id="思维导图如下" tabindex="-1">思维导图如下： <a class="header-anchor" href="#思维导图如下" aria-hidden="true">#</a></h2><p><img src="'+p+`" alt=""> 代码编写如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">head</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">number</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">k</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> rotateRight </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">size</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">size</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//将链表尾节点和head穿成环</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 找到向右旋转的个数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">size</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 处理k大于链表长度的情况</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">size</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 链表向右移动的位数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">k</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 将链表右移k位</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">head</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="场景二-旋转链表二" tabindex="-1">场景二：旋转链表二 <a class="header-anchor" href="#场景二-旋转链表二" aria-hidden="true">#</a></h2><h2 id="描述-给定一个链表-两两交换其中相邻的节点-并返回交换后的链表。" tabindex="-1">描述：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 <a class="header-anchor" href="#描述-给定一个链表-两两交换其中相邻的节点-并返回交换后的链表。" aria-hidden="true">#</a></h2><h2 id="算法思路-1" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路-1" aria-hidden="true">#</a></h2><ol><li>创建一个虚拟头节点T,指向链表里的head;</li><li>再分别命名三个指针，指向原链表的head，head.next和head.next.next;</li><li>接下来进行两两交换：</li><li>首先P指向N，接着C指向P，然后T指向C；这样第一步的交换就完成了；</li><li>接着T移动到P，然后P移动到N，然后C移动到P后一位，然后N要放在C的下一位，移动完毕；</li><li>接着上种移动指针的顺序无限循环；</li><li>接着第二轮，交换P指针和C指针的值，然后，T指针到P的位置；</li><li>接着P指针到N的位置，然后，N往后移一位：</li><li>这里思考一下，如果，没有9这个节点呢？我们需要注意什么 呢？</li><li>此时要判断P==null || p.nex==null;</li></ol><h2 id="思维导图如下-1" tabindex="-1">思维导图如下： <a class="header-anchor" href="#思维导图如下-1" aria-hidden="true">#</a></h2><p><img src="`+o+`" alt=""></p><p>代码编写如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">head</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> swapPairs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ListNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">temp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">temp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="场景三-删除链表的倒数第-n-个结点" tabindex="-1">场景三：删除链表的倒数第 N 个结点 <a class="header-anchor" href="#场景三-删除链表的倒数第-n-个结点" aria-hidden="true">#</a></h2><h2 id="描述-给你一个链表-删除链表的倒数第-n-个结点-并且返回链表的头结点。" tabindex="-1">描述：给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。 <a class="header-anchor" href="#描述-给你一个链表-删除链表的倒数第-n-个结点-并且返回链表的头结点。" aria-hidden="true">#</a></h2><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><h2 id="算法思路-2" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路-2" aria-hidden="true">#</a></h2><ol><li>先假设我的N是2 ，那么我们就是删除倒数第2个元素，但是链表是没有索引的，就不能按着数组的方法删除；</li><li>想要删除倒数第N个元素，就必须找到当前待删除的前一个元素；</li><li>那么如何删除倒数第2个元素呢？</li><li>首先，先在当前待删除元素的前一个元素命名为T指针，然后呢，在当前链表的尾节点他指向的是NUll空指针，我们命名为这个空指针是P</li><li>当我们P指针指向的是NUll的时候，我们的T指针必然指向的是当前待删除的前一个元素；</li><li>所以T指针和P指针两者的关系和距离显而易见；T和P两者差着题中给定的N个节点，差着 N+1个步；</li><li>接着我们将链表的头部插入一个虚拟头节点；然后将虚拟头节点指向我们链表的头节点；</li><li>然后让T指针在虚拟头节点的位置上，根据第6点得到T和P之间的距离，把P 放到正确位 置</li><li>当 P指向NULL时候，当前待删除节点的前一个节点就找到了</li><li>最后，让当前待删除的前一个节点 指向 待删除的下一个节点；也就是断开了当前待删除 的节点的前一位到当前待删除的节点的指向；</li></ol><h2 id="思维导图如下-2" tabindex="-1">思维导图如下： <a class="header-anchor" href="#思维导图如下-2" aria-hidden="true">#</a></h2><p><img src="`+e+`" alt=""></p><p>代码如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* function ListNode(val, next) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* this.next = (next===undefined ? null : next)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">head</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">number</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">n</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> removeNthFromEnd </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ListNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">pre</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">n</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">) (</span><span style="color:#BABED8;">pre</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="场景四-删除排序链表中重复的元素" tabindex="-1">场景四：删除排序链表中重复的元素 <a class="header-anchor" href="#场景四-删除排序链表中重复的元素" aria-hidden="true">#</a></h2><h2 id="描述-给你一个有序数组-nums-请你-原地-删除重复出现的元素-使每个元素-只出现一次-返回删除后数组的新长度。" tabindex="-1">描述：给你一个有序数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。 <a class="header-anchor" href="#描述-给你一个有序数组-nums-请你-原地-删除重复出现的元素-使每个元素-只出现一次-返回删除后数组的新长度。" aria-hidden="true">#</a></h2><h2 id="算法思路-3" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路-3" aria-hidden="true">#</a></h2><ol><li>首先声明一个虚拟头节点，然后让这个虚拟头节点指向链表的head；</li><li>接着使用双指针，慢指针是T,快指针是P,P比T多走一位;</li><li>然后设置一个while循环，如果T.val = P.next.val，那么就是出现了重复的元素，就需要去重；</li><li>删除的方法就是让 T 的下一个指针指向下一个的下一个；</li><li>如果不相等则 T 移动到下一个位置继续循环；</li><li>当 T 和 P.next 的存在为循环结束条件，当二者有一个不存在时说明链表没有去重复的必要了；</li></ol><h2 id="思维导图" tabindex="-1">思维导图： <a class="header-anchor" href="#思维导图" aria-hidden="true">#</a></h2><p><img src="`+t+`" alt=""></p><h2 id="代码如下" tabindex="-1">代码如下： <a class="header-anchor" href="#代码如下" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#BABED8;font-style:italic;">head</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">ListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> deleteDuplicates </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="场景五-删除排序链表中重复的元素" tabindex="-1">场景五：删除排序链表中重复的元素|| <a class="header-anchor" href="#场景五-删除排序链表中重复的元素" aria-hidden="true">#</a></h2><h2 id="描述-给定一个排序链表-删除所有含有重复数字的节点-只保留原始链表中-没有重复出现-的数字。" tabindex="-1">描述：给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 <em>没有重复出现</em> 的数字。 <a class="header-anchor" href="#描述-给定一个排序链表-删除所有含有重复数字的节点-只保留原始链表中-没有重复出现-的数字。" aria-hidden="true">#</a></h2><h2 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">输入</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#FFCB6B;">输出</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F78C6C;">5</span></span>
<span class="line"></span></code></pre></div><h2 id="算法思路-4" tabindex="-1">算法思路： <a class="header-anchor" href="#算法思路-4" aria-hidden="true">#</a></h2><ol><li>首先我们要新建一个节点指向head，为的是创建一条头指针为空的链(<strong>因为删除重复元素时有可能需要删除第一个</strong>)；</li><li>接着我们遍历链表来查找重复的数；</li><li>命名prev为前一个指针，cur为当前指针；</li><li>如果cur 和 cur.next的val相同，那么cur继续向前移，prev不动；</li><li>等到不相同了，再将prev.next指向cur.next，这样就一次性跳过重复的数；</li><li>当然有时候还没遇到相同数，而我们又需要更新prev；</li><li>所以多加一个判断条件，来判断是要更新prev还是删除相同数;</li></ol><h2 id="代码编写" tabindex="-1">代码编写： <a class="header-anchor" href="#代码编写" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> deleteDuplicates </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">head</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">pre</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ret</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">pre</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">cur</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">  </span></span>
<span class="line"></span></code></pre></div>`,42),y=[r];function i(F,D,B,E,d,h){return l(),n("div",null,y)}const u=s(c,[["render",i]]);export{f as __pageData,u as default};
