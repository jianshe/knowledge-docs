import{_ as s,c as a,o as n,a as p}from"./app.16764a97.js";const o="/assets/SuperType.4b1dc7c5.png",t="/assets/Object.30df708b.png",l="/assets/Fn.dfac5c38.png",E=JSON.parse('{"title":"深入理解javascript原型和闭包—prototype原型","description":"","frontmatter":{},"headers":[],"relativePath":"interview/javascript/深入理解javascript原型和闭包—prototype原型.md"}'),e={name:"interview/javascript/深入理解javascript原型和闭包—prototype原型.md"},r=p('<h1 id="深入理解javascript原型和闭包—prototype原型" tabindex="-1">深入理解javascript原型和闭包—prototype原型 <a class="header-anchor" href="#深入理解javascript原型和闭包—prototype原型" aria-hidden="true">#</a></h1><blockquote><p>函数也是一种对象，它也是属性的集合，你也可以对函数进行自定义属性。javascript会默认给函数一个属性--prototype，每个函数都有一个属性叫做prototype,这个属性值是一个对象（属性的集合），默认的只有一个叫做constructor的属性，指向这个函数本身。</p></blockquote><p><img src="'+o+'" alt="16f879b5b51541a1"> 如上图，SuperType是一个函数，右侧的方框就是它的原型。</p><p>原型既然作为对象，属性的集合，不可能就只弄个constructor来玩玩，可以自定义许多属性。例如Object大哥，人家的prototype里面，就有好几个其它属性。 <img src="'+t+`" alt="16f879b5b51541a1"> 你也可以在自己自定义的方法的prototype中新增自己的属性</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Fn</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">albert</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getYear</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1990</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> fn  </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Fn</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(fn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getYear</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="`+l+'" alt="16f879b5b51541a1"></p><p>Fn是一个函数，fn对象是从Fn函数new出来的，这样fn对象就可以调用Fn.prototype中的属性。</p><p><strong>因为每个对象都有一个隐藏的属性--&quot;<strong>proto</strong>&quot;,这个属性引用了创建这个对象的函数的prototype。即fn.<strong>proto</strong> === Fn.prototype,这里的__proto__成为&quot;隐式原型&quot;</strong></p>',8),c=[r];function y(F,D,i,_,B,A){return n(),a("div",null,c)}const f=s(e,[["render",y]]);export{E as __pageData,f as default};
