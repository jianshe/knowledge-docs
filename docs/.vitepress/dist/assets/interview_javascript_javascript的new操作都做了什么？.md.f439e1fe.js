import{_ as s,c as a,o as n,a as l}from"./app.16764a97.js";const _=JSON.parse('{"title":"javascript的new操作都做了什么？","description":"","frontmatter":{},"headers":[],"relativePath":"interview/javascript/javascript的new操作都做了什么？.md"}'),o={name:"interview/javascript/javascript的new操作都做了什么？.md"},p=l(`<h1 id="javascript的new操作都做了什么" tabindex="-1">javascript的new操作都做了什么？ <a class="header-anchor" href="#javascript的new操作都做了什么" aria-hidden="true">#</a></h1><p>先看下面的伪代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">MyFunction</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Mr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Albert</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> MyFunction</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    var obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">;</span></span>
<span class="line"><span style="color:#BABED8;">    obj.__proto__ </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">MyFunction</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype;</span></span>
<span class="line"><span style="color:#BABED8;">    var result </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> MyFunction</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Mr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Albert</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">);</span></span>
<span class="line"><span style="color:#BABED8;">    return typeof result </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">obj</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> result </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> obj;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>创建一个空对象obj;</li><li>将新对象的空对象的隐式原型指向其构造函数的显式原型。</li><li>使用call改变this的指向</li><li>如果无返回值或者返回一个非对象值，则将obj返回作为新对象；如果返回值是一个新对象的话那么直接返回该对象。</li></ul><p>所以我们可以看到，在new的过程中，我们是使用call改变了this的指向。</p>`,5),t=[p];function e(c,r,D,y,F,i){return n(),a("div",null,t)}const A=s(o,[["render",e]]);export{_ as __pageData,A as default};
