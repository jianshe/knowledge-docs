import{_ as s,c as n,o as a,a as l}from"./app.16764a97.js";const E=JSON.parse('{"title":"递归与栈典型应用场景（一）","description":"","frontmatter":{},"headers":[{"level":2,"title":"场景一：化栈为队","slug":"场景一-化栈为队","link":"#场景一-化栈为队","children":[]},{"level":2,"title":"描述：实现一个MyQueue类，该类用两个栈来实现一个队列。","slug":"描述-实现一个myqueue类-该类用两个栈来实现一个队列。","link":"#描述-实现一个myqueue类-该类用两个栈来实现一个队列。","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路","link":"#算法思路","children":[]},{"level":2,"title":"代码实现如下：","slug":"代码实现如下","link":"#代码实现如下","children":[]},{"level":2,"title":"场景二：棒球比赛","slug":"场景二-棒球比赛","link":"#场景二-棒球比赛","children":[]},{"level":2,"title":"描述：比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：","slug":"描述-比赛开始时-记录是空白的。你会得到一个记录操作的字符串列表-ops-其中-ops-i-是你需要记录的第-i-项操作-ops-遵循下述规则","link":"#描述-比赛开始时-记录是空白的。你会得到一个记录操作的字符串列表-ops-其中-ops-i-是你需要记录的第-i-项操作-ops-遵循下述规则","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-1","link":"#算法思路-1","children":[]},{"level":2,"title":"代码编写如下：","slug":"代码编写如下","link":"#代码编写如下","children":[]},{"level":2,"title":"场景三：比较含退格的字符串","slug":"场景三-比较含退格的字符串","link":"#场景三-比较含退格的字符串","children":[]},{"level":2,"title":"描述：给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 #代表退格字符。","slug":"描述-给定-s-和-t-两个字符串-当它们分别被输入到空白的文本编辑器后-判断二者是否相等-并返回结果。-代表退格字符。","link":"#描述-给定-s-和-t-两个字符串-当它们分别被输入到空白的文本编辑器后-判断二者是否相等-并返回结果。-代表退格字符。","children":[]},{"level":2,"title":"算法思路：","slug":"算法思路-2","link":"#算法思路-2","children":[]},{"level":2,"title":"代码实现如下：","slug":"代码实现如下-1","link":"#代码实现如下-1","children":[]}],"relativePath":"algorithm/stack/递归与栈典型应用场景（一）.md"}'),p={name:"algorithm/stack/递归与栈典型应用场景（一）.md"},o=l("",27),t=[o];function e(c,r,y,F,D,i){return a(),n("div",null,t)}const A=s(p,[["render",e]]);export{E as __pageData,A as default};
